2023-09-04

Today I met with Roberto, and we decided to create a plan of action.
I removed all the code from the repository, and decided to start over.
So, today I defined patterns without grammars with:
empty, dot, char, sequence, choice, klenee and not.
I also started today to define the semantics.
It's incredible how the semantic definitions get simpler when the
`option string` part of the inductive definition is actually the
remaining string of the match, not the matched string!!
Another thing that got my attention is the definition of the
Kleene closure. There is a definition that uses other pattern
definitions, which is [[ p* === pp* / empty ]].
Another way to define is one a case-to-case basis.
If p matches, do this. Otherwise, do that.
I don't know yet how these definitions will impact the proofs later on,
but the second one seems cleaner, as it doesn't depend on other patterns.

2023-04-04

Tried formalizing PEG with a big-step semantics, but Coq wouldn't let me.
I think the problem lies in the reduction of non-terminal expressions.
After all, Coq wouldn't let me define a fixpoint that might enter an
infinite loop, like "A <- A".

So, I tried formalizing a small-step semantics. I quickly noticed that the
evaluation state had to contain some sort of stack that we could use for
ordered choices and predicates. I also noticed that some parsing expressions
could be made from others. For example, the optional parsing expression
could be defined as an ordered choice between some parsing expression and
the empty string. Same for the star and plus operators.

2023-04-05

After reading the LPEG article, I also noticed that the and operator
could be defined in terms of the not operator. Later, I realised that the
not operator could be described in terms of the ordered choice expression.
Therefore, I removed both the and and the not operator.

I also noticed that there was some non-determinism at play when reducing
sequences, because we could pop certain entries from the stack which were
not meant to be popped. So, I created the wrap expression which allows us
to emulate the commit instruction from the PEG virtual machine. When
the wrapped subexpression is true, it is simply unwrapped. When it is false,
the entry on top of the stack is popped and its state is recuperated.

The not-so-nice thing about the wrap expression is that it is something
I made up so that the small step semantics worked somehow. If this expression
were present in the tree already, it could lead to undersired behavior.
This "internal" node is not something elegant, I find.

2023-04-07

Frustrated with the small step semantics having an artificial expression,
I gave the big step semantics some thought. Coq wouldn't let me define
a fixpoint if there weren't something decreasing (or getting "smaller").
This reminded me of the summer classes with Philip Wadler, where he would
define a language and a big step semantics with a gas meter that would
go down every level of the fixpoint recursion. I was about to sleep when
this idea came to me. And so I moved the PEG.v file to Smallstep.v and
cloned it to a new file called Bigstep.v. After some hacking, I managed
to get the fixpoint definition working. I made some dummy tests and it
seems to be working fine. First time I tried proving something about it,
my computer crashed somehow. Maybe Coq isn't a good engine for running
programs, I guess---just for proving things about them. :-)

The parsing can result in one of four things: success, failure, out of
gas exception and missing non-terminal reference exception. The success
result also carries the string suffix of the match, which is essential
when defining the operational semantics of the sequence expression.
The other result constructors also take some values but they are mainly
for debugging purposes and are not crucial to the specification.
I quickly noticed that the fixpoint definition wouldn't help me prove
propositions about the language, because they heavily rely on induction.
That's why I decided to re-write the big step semantics but using an
inductive set of inference rules. Not only was the structure of the
code more organized than in the fixpoint case, but also how the program
was being executed was made much more transparent.

In this new implementation, there were only two results possible:
success (which also carries the string match suffix) or failure.
The out-of-gas exception made no sense anymore since we don't need
to use the gas mechanism to allow Coq to define the parse function.
We still don't accept invalid non-terminal indices, but not through
a result value. Rather, you simply cannot say anything about the
parsing. The expression and PEG simply don't get along! It is a
programming error, not a parsing one! And since we don't care about
programming errors when specifying the semantics of PEGs, we can
simply ignore these cases for the sake of simplicity!

2023-04-08

Next step was trying to write high-level parsing expression using
the ones defined in the big-step semantics. I was able to define
?, * and + operators. However, I could not define the & and !
predicates with the ones defined. That barrier has led me to make
the ! predicate an integral part of the language. With this predicate
defined, I can define & as !!. This is the definition given in the
LPEG articleâ€”a syntatic sugar.

2023-04-09

I added notation for the following core expression operators:
- Sequence: e1; e2
- Ordered choice: e1 // e2
- Not predicate: !e

and for the following high-level expression operators:
- And predicate: &e

One of the motives given by Roberto was to try to define an
if-then-else expression using the canonical PEG syntax. I decided
to use the following definition:

if& e1 then e2 else e3 === &e1; e2 // !e1; e3

I proved that the parse proposition was deterministic in the result.
This allowed me to prove theorems about the if-then-else expression.
For example, if e1 matches, the if expression is equivalent to e2.
Likewise, if e1 fails, the if expression is equivalent to e3.
Finally, if e1 can't be parsed, then the if expression also can't.

Also, I removed any unused high-level expressions, such as:
Kleene star (*), plus (+), optional (?).
